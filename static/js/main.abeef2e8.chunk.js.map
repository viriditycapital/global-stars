{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","width","height","svg","d3","append","attr","Math","min","projection","scale","translate","path","countries","features","filter","d","id","max_capita","min_capita","forEach","star_data","capita","parseFloat","num_stars","replace","data","population","color","domain","range","tip","d3_tip","html","num_to_display","srcElement","__data__","toFixed","direction","call","selectAll","enter","style","console","log","on","show","this","hide","datum","topojson","a","b","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uw7iBA8IiBA,E,kLAnIb,IACAC,EAAQ,IADyC,EAApB,EAE7BC,EAAS,IAFU,EAAqB,EAIpCC,EAAMC,IAAU,cACnBC,OAAO,OACPC,KAAK,QAAS,QACdA,KAAK,SAAU,QACfA,KAAK,UAAU,OAAOC,KAAKC,IAAIP,EAAMC,GAAQ,IAAIK,KAAKC,IAAIP,EAAMC,IAChEI,KAAK,sBAAsB,YAC3BD,OAAO,KACPC,KAAK,YAAa,aAAeL,EAAM,GAArB,OAEfQ,EAAaL,MAChBM,MAAM,KACNC,UAAW,CAACV,EAAQ,EAAGC,EAAS,MAE7BU,EAAOR,MAAaK,WAAWA,GAEnCI,EAAUC,SAAWD,EAAUC,SAASC,QAAO,SAAAC,GAAC,MAAa,QAATA,EAAEC,MAEtD,IAAIC,EAAa,EACbC,EAAa,IACjBN,EAAUC,SAASM,SAAQ,SAACJ,GACtBK,EAAUL,EAAEC,MACdD,EAAEM,OA7BgB,IA8BIC,WAAWF,EAAUL,EAAEC,IAAIO,UAAUC,QAAQ,KAAM,KAAKJ,EAAUL,EAAEC,IAAIS,KAAKC,WAG/FX,EAAEM,OAASJ,EACbA,EAAaF,EAAEM,OACNN,EAAEM,OAASH,IACpBA,EAAaH,EAAEM,YAKrB,IAAIM,EAAQxB,MACXyB,OAAO,CACN,EACAV,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACAD,IAEDY,MAAM,CACL,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,oBACA,oBACA,mBACA,mBACA,mBACA,mBACA,kBACA,eAIIC,EAAMC,cAAS1B,KAAK,QAAS,UAClC2B,MAAK,SAACjB,GACL,IAAIkB,EAAiBlB,EAAEmB,WAAWC,SAASd,OAC3CN,EAAEmB,WAAWC,SAASd,OAAOe,QAAQ,GAAK,MAC1C,MAAM,mBAAN,OACUrB,EAAEmB,WAAWC,SAASnB,GADhC,qDAE0BiB,EAF1B,sBAMFH,EAAIO,UAAU,KAGdnC,EAAIoC,KAAKR,GAET5B,EAAIE,OAAO,KACVC,KAAK,QAAS,aACdkC,UAAU,QACVd,KAAKb,EAAUC,UACf2B,QAAQpC,OAAO,QACfC,KAAK,IAAKM,GACV8B,MAAM,QAAQ,SAAC1B,GACd,OAAIK,EAAUL,EAAEC,KACd0B,QAAQC,IAAI,SAAU5B,EAAEC,GAAID,EAAEM,OAAQM,EAAMZ,EAAEM,SACvCM,EAAMZ,EAAEM,UAGfqB,QAAQC,IAAI,MAAOhB,EAAM,IAClBA,EAAM,OAGhBc,MAAM,SAAU,SAChBA,MAAM,eAAgB,KACtBA,MAAM,UAAU,IAEhBA,MAAM,SAAS,SACfA,MAAM,eAAgB,IACtBG,GAAG,aAAa,SAAU7B,GAAKe,EAAIe,KAAK9B,EAAG+B,SAC3CF,GAAG,WAAYd,EAAIiB,MACpB7C,EAAIE,OAAO,QACV4C,MAAMC,IAAcrC,EAAUC,UAAU,SAASqC,EAAGC,GAAK,OAAOD,EAAElC,KAAOmC,EAAEnC,OAC3EX,KAAK,QAAS,SACdA,KAAK,IAAKM,K,+BAIX,OACE,yBAAKyC,UAAU,OACf,yBAAKA,UAAU,SAAf,wBAGA,yBAAKA,UAAU,mB,GA/HHC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.abeef2e8.chunk.js","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport d3_tip from 'd3-tip';\nimport * as topojson from \"topojson-client\";\nimport countries from './world-countries.json';\nimport star_data from './countries_data.json';\n\nconst PER_CAPITA_AMOUNT = 1e6;\n\nclass App extends React.Component {\n  componentDidMount() {\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n    var svg = d3.select(\".world-map\")\n    .append(\"svg\")\n    .attr(\"width\", '100%')\n    .attr(\"height\", '100%')\n    .attr('viewBox','0 0 '+Math.min(width,height)+' '+Math.min(width,height))\n    .attr('preserveAspectRatio','xMinYMin')\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width/11 + \",\" + 0 + \")\");\n\n    var projection = d3.geoMercator()\n    .scale(130)\n    .translate( [width / 2, height / 1.5]);\n\n    var path = d3.geoPath().projection(projection);\n\n    countries.features = countries.features.filter(d => d.id !== \"ATA\");\n\n    let max_capita = 0;\n    let min_capita = 1000;\n    countries.features.forEach((d) => {\n      if (star_data[d.id]) {\n        d.capita = (\n          PER_CAPITA_AMOUNT * parseFloat(star_data[d.id].num_stars.replace(/,/g, ''))/star_data[d.id].data.population\n        );\n\n        if (d.capita > max_capita) {\n          max_capita = d.capita;\n        } else if (d.capita < min_capita) {\n          min_capita = d.capita\n        }\n      }\n    });\n\n    let color = d3.scaleThreshold()\n    .domain([\n      0,\n      min_capita,\n      1,\n      2,\n      5,\n      10,\n      15,\n      25,\n      50,\n      75,\n      100,\n      150,\n      250,\n      500,\n      max_capita\n    ])\n    .range([\n      \"rgb(255, 255, 255)\",\n      \"rgb(255, 246, 230)\",\n      \"rgb(255, 236, 204)\",\n      \"rgb(255, 227, 179)\",\n      \"rgb(255, 218, 153)\",\n      \"rgb(255, 208, 128)\",\n      \"rgb(255, 190, 77)\",\n      \"rgb(255, 180, 51)\",\n      \"rgb(255, 171, 26)\",\n      \"rgb(255, 162, 0)\",\n      \"rgb(230, 145, 0)\",\n      \"rgb(204, 129, 0)\",\n      \"rgb(179, 113, 0)\",\n      \"rgb(153, 97, 0)\",\n      \"rgb(0,0,0)\"\n    ]);\n\n    /* Initialize tooltip */\n    const tip = d3_tip().attr('class', 'd3-tip')\n    .html((d) => {\n      let num_to_display = d.srcElement.__data__.capita ?\n      d.srcElement.__data__.capita.toFixed(2) : 'N/A';\n      return `\n      <strong>${d.srcElement.__data__.id}:</strong>\n      <span style='color:red'>${num_to_display}\n      </span>`;\n    });\n\n    tip.direction('s')\n\n    /* Invoke the tip in the context of your visualization */\n    svg.call(tip);\n\n    svg.append(\"g\")\n    .attr(\"class\", \"countries\")\n    .selectAll(\"path\")\n    .data(countries.features)\n    .enter().append(\"path\")\n    .attr(\"d\", path)\n    .style(\"fill\", (d) => {\n      if (star_data[d.id]) {\n        console.log('capita', d.id, d.capita, color(d.capita))\n        return color(d.capita);\n      } else {\n        // undefined numbers\n        console.log('und', color(0))\n        return color(0);\n      }\n    })\n    .style('stroke', 'white')\n    .style('stroke-width', 1.5)\n    .style(\"opacity\",0.8)\n    // tooltips\n    .style(\"stroke\",\"white\")\n    .style('stroke-width', 0.3)\n    .on('mouseover', function (d) { tip.show(d, this); })\n    .on('mouseout', tip.hide);\n    svg.append(\"path\")\n    .datum(topojson.mesh(countries.features, function(a, b) { return a.id !== b.id; }))\n    .attr(\"class\", \"names\")\n    .attr(\"d\", path);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div className='title'>\n      Pornstars per capita\n      </div>\n      <div className='world-map'/>\n      </div>\n      );\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}